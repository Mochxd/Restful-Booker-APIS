{
	"info": {
		"_postman_id": "e6682bed-d762-4cdf-a922-4d52999c17e7",
		"name": "Restful Booker APIS",
		"description": "## Testing API documentation for the website \"[Restful-booker](http://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-DeleteBooking)\"\n\nThe tests cover various endpoints and scenarios to ensure the API's functionality and reliability. The project is designed to be easily extendable and maintainable.\n\n#### Tasks\n\n- CREATE Token\n- GET ALL Booking ID\n- CREATE Booking\n- GET Details For Booking ID\n- UPDATE Booking\n- UPDATE Booking Partially\n- DELETE Booking\n- Ping - HealthCheck",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30312474"
	},
	"item": [
		{
			"name": "CREATE Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify respons body contain token\r",
							"pm.test(\"Body contains token\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"}); \r",
							"\r",
							"// Verify the API response is JSON Format.\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
				},
				"url": {
					"raw": "{{baseurl}}/auth",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ALL Booking ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/booking",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// create an environment variable called bookingid to use to get Specified detils for ID\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
							"\r",
							"// Verify the API response contains all valid fields\r",
							"// check the first name\r",
							"var fname = pm.environment.get(\"firstname\");\r",
							"pm.test(\"First name is correct\", function () {\r",
							"    pm.expect(jsonData.booking.firstname).to.eql(fname);\r",
							"});\r",
							"\r",
							"// check the last name\r",
							"var lname = pm.environment.get(\"lastname\");\r",
							"pm.test(\"Last name is correct \", function () {\r",
							"    pm.expect(jsonData.booking.lastname).to.eql(lname);\r",
							"});\r",
							"\r",
							"// check the total price \r",
							"var totalp = pm.environment.get(\"totalprice\");\r",
							"pm.test(\"Total price is correct \", function () {\r",
							"    pm.expect(jsonData.booking.totalprice).to.eql(totalp);\r",
							"});\r",
							"\r",
							"// check the deposit paid \r",
							"var depositp = pm.environment.get(\"depositpaid\");\r",
							"pm.test(\"Deposit paid is correct \", function () {\r",
							"    pm.expect(jsonData.booking.depositpaid).to.eql(depositp);\r",
							"});\r",
							"\r",
							"// check the check in \r",
							"var checki = pm.environment.get(\"checkin\");\r",
							"pm.test(\"Check in is correct \", function () {\r",
							"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checki);\r",
							"});\r",
							"\r",
							"// check the check out \r",
							"var checko = pm.environment.get(\"checkout\");\r",
							"pm.test(\"Check out is correct \", function () {\r",
							"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checko);\r",
							"});\r",
							"\r",
							"// check the additional needs \r",
							"var addneeds = pm.environment.get(\"additionalneeds\");\r",
							"pm.test(\"Additional needs  is correct \", function () {\r",
							"    pm.expect(jsonData.booking.additionalneeds ).to.eql(addneeds);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null.\r",
							"// check the first name not equal null\r",
							"pm.test(\"The first name is not equal null \", function () {\r",
							"        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the last name not equal null\r",
							"pm.test(\"The Last name is not equal null \", function () {\r",
							"    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the total price not equal null\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the deposit paid not equal null\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check in not equal null\r",
							"pm.test(\"The check in is not equal null \", function () {\r",
							"        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check out not equal null\r",
							"pm.test(\"The check out is not equal null \", function () {\r",
							"    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the additional needs not equal null\r",
							"pm.test(\"The additional needs is not equal null \", function () {\r",
							"    pm.expect(jsonData.booking.additionalneeds ).to.to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the first name is string\r",
							"pm.test(\"The first name data is String\", function () {\r",
							"        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the last name is string\r",
							"pm.test(\"The Last name is String \", function () {\r",
							"    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the total price is number\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// check the deposit paid is Boolean\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
							"});\r",
							"\r",
							"// check the check in String\r",
							"pm.test(\"The check in is String \", function () {\r",
							"        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the check out is String\r",
							"pm.test(\"The check out is is String\", function () {\r",
							"    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the additional is String\r",
							"pm.test(\"The additional needs is String\", function () {\r",
							"    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random first name \r",
							"function getfirstnameItem() {\r",
							"    var firstname = [\"Mohamed\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"Emad\",\"Salma\",\"Mickel\",\"Nahla\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * firstname.length);\r",
							"    return firstname[randomIndex];\r",
							"}\r",
							"\r",
							"// Make an environment variable called firstname \r",
							"pm.environment.set(\"firstname\", getfirstnameItem());\r",
							"\r",
							"// Get a random last name \r",
							"function getlasttnameItem() {\r",
							"    var lastname = [\"Mostafa\", \"Samir\", \"Hamdy\", \"Hemida\", \"Mosaad\", \"Hassan\",\"Ali\",\"Mounir\",\"Amr\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * lastname.length);\r",
							"    return lastname[randomIndex];\r",
							"}\r",
							"\r",
							"// Make an environment variable called lastname \r",
							"pm.environment.set(\"lastname\", getlasttnameItem());\r",
							"\r",
							"// Get a random totalprice \r",
							"function getprice() {\r",
							"  var min = 200;\r",
							"  var max = 1000;  \r",
							"  return Math.floor(Math.random() * (max - min) ) + min;\r",
							"}\r",
							"\r",
							"// Make an environment variable called totalprice \r",
							"pm.environment.set(\"totalprice\", getprice());\r",
							"\r",
							"// Get a random Bollean depositpaid \r",
							"function getdepositpaid(){\r",
							"    return Math.random >= 0.5;\r",
							"}\r",
							"\r",
							"// Make an environment variable called depositpaid\r",
							"pm.environment.set(\"depositpaid\", getdepositpaid());\r",
							"\r",
							"// Get a random checkin  \r",
							"function getRandomcheckin() {\r",
							"    const startDate = new Date('2000-01-01');\r",
							"    const endDate = new Date('2003-12-31');\r",
							"    const checkin = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())) \r",
							"    return checkin.toISOString().slice(0, 10);;\r",
							"}\r",
							"\r",
							"// Make an environment variable called checkin\r",
							"pm.environment.set(\"checkin\", getRandomcheckin());\r",
							"\r",
							"// Get a random checkout  \r",
							"function getRandomcheckout() {\r",
							"    const startDate = new Date('2003-01-01');\r",
							"    const endDate = new Date('2005-12-31');\r",
							"    const checkout = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())) \r",
							"    return checkout.toISOString().slice(0, 10);;\r",
							"}\r",
							"\r",
							"// Make an environment variable called checkout\r",
							"pm.environment.set(\"checkout\", getRandomcheckout());\r",
							"\r",
							"// Get a random additional needs\r",
							"function getadditionalneeds() {\r",
							"    var needs = [\"super bowls\", \"Bussiness Class\", \"Coffe and Some food\", \"Without Privileges\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * needs.length);\r",
							"    return needs[randomIndex];\r",
							"}\r",
							"\r",
							"// Make an environment variable called additional needs \r",
							"pm.environment.set(\"additionalneeds\", getadditionalneeds());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Details For Booking ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify that the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify that the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Define Response Data\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Verify the API response contains all valid fields\r",
							"// check the first name\r",
							"var fname = pm.environment.get(\"firstname\");\r",
							"pm.test(\"First name is correct\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(fname);\r",
							"});\r",
							"\r",
							"// check the last name\r",
							"var lname = pm.environment.get(\"lastname\");\r",
							"pm.test(\"Last name is correct \", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(lname);\r",
							"});\r",
							"\r",
							"// check the total price \r",
							"var totalp = pm.environment.get(\"totalprice\");\r",
							"pm.test(\"Total price is correct \", function () {\r",
							"    pm.expect(jsonData.totalprice).to.eql(totalp);\r",
							"});\r",
							"\r",
							"// check the deposit paid \r",
							"var depositp = pm.environment.get(\"depositpaid\");\r",
							"pm.test(\"Deposit paid is correct \", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(depositp);\r",
							"});\r",
							"\r",
							"// check the check in \r",
							"var checki = pm.environment.get(\"checkin\");\r",
							"pm.test(\"Check in is correct \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(checki);\r",
							"});\r",
							"\r",
							"// check the check out \r",
							"var checko = pm.environment.get(\"checkout\");\r",
							"pm.test(\"Check out is correct \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(checko);\r",
							"});\r",
							"\r",
							"// check the additional needs \r",
							"var addneeds = pm.environment.get(\"additionalneeds\");\r",
							"pm.test(\"Additional needs  is correct \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.additionalneeds ).to.eql(addneeds);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the first name not equal null\r",
							"pm.test(\"The first name is not equal null \", function () {\r",
							"        pm.expect(jsonData.firstname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the last name not equal null\r",
							"pm.test(\"The Last name is not equal null \", function () {\r",
							"    pm.expect(jsonData.lastname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the total price not equal null\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the deposit paid not equal null\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check in not equal null\r",
							"pm.test(\"The check in is not equal null \", function () {\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check out not equal null\r",
							"pm.test(\"The check out is not equal null \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the additional needs not equal null\r",
							"pm.test(\"The additional needs is not equal null \", function () {\r",
							"    pm.expect(jsonData.additionalneeds ).to.to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the first name is string\r",
							"pm.test(\"The first name data is String\", function () {\r",
							"        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the last name is string\r",
							"pm.test(\"The Last name is String \", function () {\r",
							"    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the total price is number\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// check the deposit paid is Boolean\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
							"});\r",
							"\r",
							"// check the check in String\r",
							"pm.test(\"The check in is String \", function () {\r",
							"        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the check out is String\r",
							"pm.test(\"The check out is is String\", function () {\r",
							"    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the additional is String\r",
							"pm.test(\"The additional needs is String\", function () {\r",
							"    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl}}/booking/{{bookingid}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is PUT\r",
							"pm.test(\"Successful PUT request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Define Response Data\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Verify the API response contains all valid fields\r",
							"// check the first name\r",
							"var fname = pm.environment.get(\"firstname\");\r",
							"pm.test(\"First name is correct\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(fname);\r",
							"});\r",
							"\r",
							"// check the last name\r",
							"var lname = pm.environment.get(\"lastname\");\r",
							"pm.test(\"Last name is correct \", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(lname);\r",
							"});\r",
							"\r",
							"// check the total price \r",
							"var totalp = pm.environment.get(\"totalprice\");\r",
							"pm.test(\"Total price is correct \", function () {\r",
							"    pm.expect(jsonData.totalprice).to.eql(totalp);\r",
							"});\r",
							"\r",
							"// check the deposit paid \r",
							"var depositp = pm.environment.get(\"depositpaid\");\r",
							"pm.test(\"Deposit paid is correct \", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(depositp);\r",
							"});\r",
							"\r",
							"// check the check in \r",
							"var checki = pm.environment.get(\"checkin\");\r",
							"pm.test(\"Check in is correct \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(checki);\r",
							"});\r",
							"\r",
							"// check the check out \r",
							"var checko = pm.environment.get(\"checkout\");\r",
							"pm.test(\"Check out is correct \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(checko);\r",
							"});\r",
							"\r",
							"// check the additional needs \r",
							"var addneeds = pm.environment.get(\"additionalneeds\");\r",
							"pm.test(\"Additional needs  is correct \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.additionalneeds ).to.eql(addneeds);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null.\r",
							"// check the first name not equal null\r",
							"pm.test(\"The first name is not equal null \", function () {\r",
							"        pm.expect(jsonData.firstname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the last name not equal null\r",
							"pm.test(\"The Last name is not equal null \", function () {\r",
							"    pm.expect(jsonData.lastname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the total price not equal null\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the deposit paid not equal null\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check in not equal null\r",
							"pm.test(\"The check in is not equal null \", function () {\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check out not equal null\r",
							"pm.test(\"The check out is not equal null \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the additional needs not equal null\r",
							"pm.test(\"The additional needs is not equal null \", function () {\r",
							"    pm.expect(jsonData.additionalneeds ).to.to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the first name is string\r",
							"pm.test(\"The first name data is String\", function () {\r",
							"        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the last name is string\r",
							"pm.test(\"The Last name is String \", function () {\r",
							"    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the total price is numeric\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// check the deposit paid is Boolean\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
							"});\r",
							"\r",
							"// check the check in String\r",
							"pm.test(\"The check in is String \", function () {\r",
							"        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the check out is String\r",
							"pm.test(\"The check out is is String\", function () {\r",
							"    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the additional is String\r",
							"pm.test(\"The additional needs is String\", function () {\r",
							"    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random first name \r",
							"function getfirstnameItem() {\r",
							"    var firstname = [\"Mohamed\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"Emad\",\"Salma\",\"Mickel\",\"Nahla\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * firstname.length);\r",
							"    return firstname[randomIndex];\r",
							"}\r",
							"\r",
							"// Make an environment variable called firstname \r",
							"pm.environment.set(\"firstname\", getfirstnameItem());\r",
							"\r",
							"// Get a random last name \r",
							"function getlasttnameItem() {\r",
							"    var lastname = [\"Mostafa\", \"Samir\", \"Hamdy\", \"Hemida\", \"Mosaad\", \"Hassan\",\"Ali\",\"Mounir\",\"Amr\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * lastname.length);\r",
							"    return lastname[randomIndex];\r",
							"}\r",
							"\r",
							"// Make an environment called lastname \r",
							"pm.environment.set(\"lastname\", getlasttnameItem());\r",
							"\r",
							"// Get a random totalprice \r",
							"function getprice() {\r",
							"  var min = 200;\r",
							"  var max = 1000;  \r",
							"  return Math.floor(Math.random() * (max - min) ) + min;\r",
							"}\r",
							"\r",
							"// Make an environment called totalprice \r",
							"pm.environment.set(\"totalprice\", getprice());\r",
							"\r",
							"// Get a random Bollean depositpaid \r",
							"function getdepositpaid(){\r",
							"    return Math.random >= 0.5;\r",
							"}\r",
							"\r",
							"// Make an environment called depositpaid\r",
							"pm.environment.set(\"depositpaid\", getdepositpaid());\r",
							"\r",
							"// Get a random checkin  \r",
							"function getRandomcheckin() {\r",
							"    const startDate = new Date('2000-01-01');\r",
							"    const endDate = new Date('2003-12-31');\r",
							"    const checkin = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())) \r",
							"    return checkin.toISOString().slice(0, 10);;\r",
							"}\r",
							"\r",
							"// Make an environment called checkin\r",
							"pm.environment.set(\"checkin\", getRandomcheckin());\r",
							"\r",
							"// Get a random checkout  \r",
							"function getRandomcheckout() {\r",
							"    const startDate = new Date('2003-01-01');\r",
							"    const endDate = new Date('2005-12-31');\r",
							"    const checkout = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())) \r",
							"    return checkout.toISOString().slice(0, 10);;\r",
							"}\r",
							"\r",
							"// Make an environment called checkout\r",
							"pm.environment.set(\"checkout\", getRandomcheckout());\r",
							"\r",
							"// Get a random additional needs\r",
							"function getadditionalneeds() {\r",
							"    var needs = [\"super bowls\", \"Bussiness Class\", \"Coffe and Some food\", \"Without Privileges\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * needs.length);\r",
							"    return needs[randomIndex];\r",
							"}\r",
							"\r",
							"// Make an environment called additional needs \r",
							"pm.environment.set(\"additionalneeds\", getadditionalneeds());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{bookingid}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE Booking Partially",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random checkin  \r",
							"function getRandomcheckin() {\r",
							"    const startDate = new Date('2000-01-01');\r",
							"    const endDate = new Date('2003-12-31');\r",
							"    const checkin = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())) \r",
							"    return checkin.toISOString().slice(0, 10);;\r",
							"}\r",
							"// Make an environment called checkin\r",
							"pm.environment.set(\"checkin\", getRandomcheckin());\r",
							"\r",
							"// Get a random checkout  \r",
							"function getRandomcheckout() {\r",
							"    const startDate = new Date('2003-01-01');\r",
							"    const endDate = new Date('2005-12-31');\r",
							"    const checkout = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())) \r",
							"    return checkout.toISOString().slice(0, 10);;\r",
							"}\r",
							"// Make an environment called checkout\r",
							"pm.environment.set(\"checkout\", getRandomcheckout());\r",
							"\r",
							"// Get a random additional needs\r",
							"function getadditionalneeds() {\r",
							"    var needs = [\"super bowls\", \"Bussiness Class\", \"Coffe and Some food\", \"Without Privileges\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * needs.length);\r",
							"    return needs[randomIndex];\r",
							"}\r",
							"// Make an environment called additional needs \r",
							"pm.environment.set(\"additionalneeds\", getadditionalneeds());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check Successful PATCH reques\r",
							"pm.test(\"Successful PATCH request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Define Response Data\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Verify the API response contains all valid fields\r",
							"// check the first name\r",
							"var fname = pm.environment.get(\"firstname\");\r",
							"pm.test(\"First name is correct\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(fname);\r",
							"});\r",
							"\r",
							"// check the last name\r",
							"var lname = pm.environment.get(\"lastname\");\r",
							"pm.test(\"Last name is correct \", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(lname);\r",
							"});\r",
							"\r",
							"// check the total price \r",
							"var totalp = pm.environment.get(\"totalprice\");\r",
							"pm.test(\"Total price is correct \", function () {\r",
							"    pm.expect(jsonData.totalprice).to.eql(totalp);\r",
							"});\r",
							"\r",
							"// check the deposit paid \r",
							"var depositp = pm.environment.get(\"depositpaid\");\r",
							"pm.test(\"Deposit paid is correct \", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(depositp);\r",
							"});\r",
							"\r",
							"// check the check in \r",
							"var checki = pm.environment.get(\"checkin\");\r",
							"pm.test(\"Check in is correct \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(checki);\r",
							"});\r",
							"\r",
							"// check the check out \r",
							"var checko = pm.environment.get(\"checkout\");\r",
							"pm.test(\"Check out is correct \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(checko);\r",
							"});\r",
							"\r",
							"// check the additional needs \r",
							"var addneeds = pm.environment.get(\"additionalneeds\");\r",
							"pm.test(\"Additional needs  is correct \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.additionalneeds ).to.eql(addneeds);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null.\r",
							"// check the first name not equal null\r",
							"pm.test(\"The first name is not equal null \", function () {\r",
							"        pm.expect(jsonData.firstname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the last name not equal null\r",
							"pm.test(\"The Last name is not equal null \", function () {\r",
							"    pm.expect(jsonData.lastname).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the total price not equal null\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the deposit paid not equal null\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check in not equal null\r",
							"pm.test(\"The check in is not equal null \", function () {\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the check out not equal null\r",
							"pm.test(\"The check out is not equal null \", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// check the additional needs not equal null\r",
							"pm.test(\"The additional needs is not equal null \", function () {\r",
							"    pm.expect(jsonData.additionalneeds ).to.to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the first name is string\r",
							"pm.test(\"The first name data is String\", function () {\r",
							"        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the last name is string\r",
							"pm.test(\"The Last name is String \", function () {\r",
							"    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the total price is numeric\r",
							"pm.test(\"The total price is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// check the deposit paid is Boolean\r",
							"pm.test(\"The deposit paid is not equal null \", function () {\r",
							"    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
							"});\r",
							"\r",
							"// check the check in String\r",
							"pm.test(\"The check in is String \", function () {\r",
							"        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the check out is String\r",
							"pm.test(\"The check out is is String\", function () {\r",
							"    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// check the additional is String\r",
							"pm.test(\"The additional needs is String\", function () {\r",
							"    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{bookingid}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 201 OK\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Verify the API response is Text format\r",
							"pm.test(\"Content-Type is Text in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl}}/booking/{{bookingid}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping - HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 201 OK\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Verify that the API response is Text Format.\r",
							"pm.test(\"Content-Type is coorect in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/ping",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Verify the API response time is within accepted.",
					"pm.test(\"Response time is less than 3000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	]
}